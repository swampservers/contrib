"VertexLitGeneric"
{
	"$basetexture" "models/pechenko_121/doomslayer/slayer"
	"$bumpmap" "models/pechenko_121/doomslayer/slayer_nrm"
	
	"$envmap" "env_cubemap"
   	"$normalmapalphaenvmapmask" “1”
	"$envmaptint" "[.01 .01 .01]"
	
	"$ambientocclusion" "1"
	
	"$phong" "1"
	"$phongboost" "1"
	"$PhongExponentTexture" "models\pechenko_121\doomslayer\exponent"
	"$phongfresnelranges" "[.5 2 8]"
	"$PhongAlbedoTint" "1"
	"$phongtint" "[.6 .7 .65]"

	"$rimlight" "1"
	"$rimlightexponent" "16"
	"$rimlightboost" ".4"
	
	"$surfaceprop" "Metal"
	"$nocull" 1

	"$blendtintbybasealpha" "1"
 	"$blendtintcoloroverbase" "0"
	"$PhongBrightnessScalar" "[0 0 0]"

	Proxies
	{
		PlayerColor
		{
			resultVar "$color2"
			default "0.67 0.81 0.44"
		}
		Clamp // clamp the chosen color between 1% and 125% (usually)
		{
			min 0.15
			max 1.25
			srcVar1 "$color2"
			resultVar "$color2"
		}
		Clamp // copy this value to phong tint, clamp it to 50% min.
		{
			min 0.5
			max 1.0
			srcVar1 "$color2"
			resultVar "$phongtint"
		}
		Equals // copy $color2 value to exterior variable. this makes it
		{      // no longer a RGB array but a single float instead (!??)
			srcVar1 "$color2"
			resultVar "$PhongBrightnessScalar"
		}
		Multiply // multiply $phongtint by this new float value.
		{
			srcVar1 "$phongtint"
			srcVar2 "$phongBrightnessScalar"
			resultVar "$phongtint"
		}
		Clamp // the result of this multiply doesn't go any lower than 20%
		{
			min 0.15
			max 1.00
			srcVar1 "$phongtint"
			resultVar "$phongtint"
		}
	}
}
